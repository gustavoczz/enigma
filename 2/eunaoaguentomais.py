message = [
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
]
from PIL import Image 
input_image = Image.open("sample.png") 
# Extracting pixel map: 
pixel_map = input_image.load() 
# Extracting the width and height  
# of the image: 
width, height = input_image.size 
# taking half of the width: 

# binary_array = []

def listToString(s): 
    
    # initialize an empty string
    str1 = "" 
    
    # traverse in the string  
    for ele in s: 
        str1 += ele  
    
    # return string  
    return str1 

mesindex = 0

for j in range(height): 
    for i in range(width): 

        # getting the RGB pixel value. 

        r, g, b = input_image.getpixel((i, j)) 

        # print(r,g,b)

        # Apply formula of grayscale: 
        # grayscale = (0.299*r + 0.587*g + 0.114*b) 

        rb = "{0:b}".format(r).zfill(8)
        gb = "{0:b}".format(g).zfill(8)
        bb = "{0:b}".format(b).zfill(8)

        # print("-=-=-=-=-=-=-=-")
        # print(r)
        # print(rb)

        if mesindex < len(message):
            rb = rb[:-1] + message[mesindex]
            mesindex += 1
        
        if mesindex < len(message):
            gb = gb[:-1] + message[mesindex]
            mesindex += 1
        
        if mesindex < len(message):
            bb = bb[:-1] + message[mesindex]
            mesindex += 1
        
        # print('novoBit: ', rb)

        rnovo = int(rb, 2)
        gnovo = int(gb, 2)
        bnovo = int(bb, 2)
        
        # print('novoVal: ', rnovo)

        # setting the pixel value. 
        pixel_map[i, j] = (rnovo, gnovo, bnovo) 


# Saving the final output 
# as "grayscale.png": 

input_image.save("final2.png", format="png") 
# use input_image.show() to see the image on the 
# output screen. 
